'use strict';

/**@type {{[k: string]: ModdedMoveData}} */
let BattleMovedex = {
	"healbellbattleready": {
		num: 215,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "Every Pokemon in the user's party is cured of its major status condition. Active Pokemon with the Soundproof Ability are not cured.",
		shortDesc: "Cures the user's party of all status conditions.",
		id: "healbellbattleready",
		isViable: true,
		name: "Heal Bell-Battle-Ready",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, sound: 1, distance: 1, authentic: 1},
		onHit: function (pokemon, source) {
			this.add('-activate', source, 'move: Heal Bell-Battle-Ready');
			let side = pokemon.side;
			let success = false;
			for (const ally of side.pokemon) {
				if (ally.hasAbility('soundproof')) continue;
				if (ally.cureStatus()) success = true;
			}
			return success;
		},
		selfSwitch: true,
		target: "allyTeam",
		type: "Normal",
		zMoveEffect: 'heal',
		contestType: "Beautiful",
	},
	"cycloneslash": {
		num: 350,
		accuracy: 95,
		basePower: 25,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "cycloneslash",
		isViable: true,
		name: "Cyclone Slash",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		effect: {
			duration: 1,
			onStart: function (target) {
				if (target.volatiles['smackdown'] || target.volatiles['ingrain']) return false;
				this.add('-start', target, 'Cyclone Slash');
			},
			onImmunity: function (type) {
				if (type === 'Ground') return false;
			},
			onResidualOrder: 15,
			onEnd: function (target) {
				this.add('-end', target, 'Cyclone Slash');
			},
		},
		target: "normal",
		type: "Steel",
		zMovePower: 140,
		contestType: "Tough",
	},
	"dashslash": {
		num: 521,
		accuracy: 100,
		basePower: 70,
		category: "Physical",
		desc: "If this move is successful and the user has not fainted, the user switches out even if it is trapped and is replaced immediately by a selected party member. The user does not switch out if there are no unfainted party members, or if the target switched out using an Eject Button or through the effect of the Emergency Exit or Wimp Out Abilities.",
		shortDesc: "User switches out after damaging the target.",
		id: "dashslash",
		isViable: true,
		name: "Dash Slash",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		selfSwitch: true,
		secondary: null,
		target: "normal",
		type: "Steel",
		zMovePower: 140,
		contestType: "Cool",
	},
	"greatslash": {
		num: 276,
		accuracy: 100,
		basePower: 120,
		category: "Physical",
		desc: "Lowers the user's Speed and Defense by 1 stage.",
		shortDesc: "Lowers the user's Speed and Defense by 1.",
		id: "greatslash",
		isViable: true,
		name: "Great Slash",
		pp: 5,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			boosts: {
				spe: -1,
				def: -1,
			},
		},
		secondary: null,
		target: "normal",
		type: "Steel",
		zMovePower: 190,
		contestType: "Tough",
	},
	"diamondpickaxe": {
		num: 229,
		accuracy: 100,
		basePower: 20,
		category: "Physical",
		desc: "If this move is successful and the user has not fainted, the effects of Leech Seed and binding moves end for the user, and all hazards are removed from the user's side of the field.",
		shortDesc: "Frees user from hazards, binding, Leech Seed.",
		id: "diamondpickaxe",
		isViable: true,
		name: "Diamond Pickaxe",
		pp: 40,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		self: {
			onHit: function (pokemon) {
				if (pokemon.hp && pokemon.removeVolatile('leechseed')) {
					this.add('-end', pokemon, 'Leech Seed', '[from] move: Rapid Spin', '[of] ' + pokemon);
				}
				let sideConditions = ['spikes', 'toxicspikes', 'stealthrock'];
				for (const condition of sideConditions) {
					if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {
						this.add('-sideend', pokemon.side, this.getEffect(condition).name, '[from] move: Rapid Spin', '[of] ' + pokemon);
					}
				}
				if (pokemon.hp && pokemon.volatiles['partiallytrapped']) {
					pokemon.removeVolatile('partiallytrapped');
				}
			},
		},
		secondary: null,
		target: "normal",
		type: "Rock",
		zMovePower: 100,
		contestType: "Cool",
	},
	"tippedarrow": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "This move's type depends on the user's individual values (IVs), and can be any type but Fairy and Normal.",
		shortDesc: "Varies in type based on the user's IVs.",
		id: "tippedarrow",
		name: "Tipped Arrow",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove: function (move, pokemon) {
			move.type = pokemon.hpType || 'Dark';
		},
		onHit: function (source, target) {
			if (source.hpType === 'Poison') {
				target.setStatus('psn');
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 120,
		contestType: "Clever",
	},
	"tippedarrowbug": {
		num: 237,
		accuracy: 100,
		basePower: 0,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		name: "Tipped Arrow Bug",
		pp: 15,
		priority: 0,
		onHit: function (target, source) {
			this.damage(target.maxhp / 4);
		},
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Clever",
	},
	"tippedarrowdark": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		name: "Tipped Arrow Dark",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	"tippedarrowdragon": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		name: "Tipped Arrow Dragon",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		contestType: "Clever",
	},
	"tippedarrowelectric": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		isViable: true,
		name: "Tipped Arrow Electric",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Clever",
	},
	"tippedarrowfighting": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		isViable: true,
		name: "Tipped Arrow Fighting",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Clever",
	},
	"tippedarrowfire": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		isViable: true,
		name: "Tipped Arrow Fire",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Clever",
	},
	"tippedarrowflying": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		name: "Tipped Arrow Flying",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		contestType: "Clever",
	},
	"tippedarrowghost": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		name: "Tipped Arrow Ghost",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Clever",
	},
	"tippedarrowgrass": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		isViable: true,
		name: "Tipped Arrow Grass",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Clever",
	},
	"tippedarrowground": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		name: "Tipped Arrow Ground",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Clever",
	},
	"tippedarrowice": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		isViable: true,
		name: "Tipped Arrow Ice",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Clever",
	},
	"tippedarrowpoison": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		name: "Tipped Arrow Poison",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onHit: function (target) {
			target.setStatus('psn');
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		contestType: "Clever",
	},
	"tippedarrowpsychic": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		name: "Tipped Arrow Psychic",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	"tippedarrowrock": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		name: "Tipped Arrow Rock",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Clever",
	},
	"tippedarrowsteel": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		name: "Tipped Arrow Steel",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Clever",
	},
	"tippedarrowwater": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Special",
		desc: "",
		shortDesc: "",
		id: "tippedarrow",
		name: "Tipped Arrow Water",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Clever",
	},
	"accursedtomb": {
		num: 371,
		accuracy: 90,
		basePower: 65,
		basePowerCallback: function (pokemon, target, move) {
			if (target.newlySwitched || !this.willMove(target)) {
				this.debug('Accursed Tomb NOT boosted');
				return move.basePower;
			}
			this.debug('Accursed Tomb damage boost');
			return move.basePower * 2;
		},
		category: "Special",
		desc: "Power doubles if the user moves before the target this turn, including actions taken through Instruct or the Dancer Ability. Switching in does not count as an action.",
		shortDesc: "Power doubles if the user moves before the target.",
		id: "accursedtomb",
		name: "Accursed Tomb",
		pp: 10,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMovePower: 100,
		contestType: "Tough",
	},
	"evilblast": {
		num: 506,
		accuracy: 130,
		basePower: 80,
		category: "Special",
		desc: "Power doubles if the target has a major status condition.",
		shortDesc: "Always accurate if the target has a status ailment.",
		id: "evilblast",
		isViable: true,
		name: "Evil Blast",
		pp: 5,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove: function (move) {
			if (target.status || target.hasAbility('comatose')) {
				move.accuracy = true;
			}
		},
		secondary: null,
		target: "normal",
		type: "Ghost",
		zMovePower: 160,
		contestType: "Clever",
	},
	"fallingskies": {
		num: 331,
		accuracy: 100,
		basePower: 25,
		category: "Physical",
		desc: "Hits two to five times. Has a 1/3 chance to hit two or three times, and a 1/6 chance to hit four or five times. If one of the hits breaks the target's substitute, it will take damage for the remaining hits. If the user has the Skill Link Ability, this move will always hit five times.",
		shortDesc: "Hits 2-5 times in one turn.",
		id: "fallingskies",
		isViable: true,
		name: "Falling Skies",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		multihit: [2, 5],
		secondary: null,
		target: "normal",
		type: "Flying",
		zMovePower: 140,
		contestType: "Cool",
	},
	"ampslam": {
		num: 9,
		accuracy: 90,
		basePower: 100,
		category: "Physical",
		desc: "Has a 10% chance to paralyze the target.",
		shortDesc: "10% chance to paralyze the target.",
		id: "ampslam",
		isViable: true,
		name: "Amp Slam",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		zMovePower: 140,
		contestType: "Cool",
	},
	"submissionidealworld": {
		num: 66,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		desc: "If the target lost HP, the user takes recoil damage equal to 1/4 the HP lost by the target, rounded half up, but not less than 1 HP.",
		shortDesc: "Has 1/4 recoil.",
		id: "submissionidealworld",
		name: "Submission-Ideal-World",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		recoil: [1, 4],
		secondary: null,
		target: "normal",
		type: "Fighting",
		zMovePower: 160,
		contestType: "Cool",
	},
	"waterpulseidealworld": {
		num: 352,
		accuracy: 100,
		basePower: 75,
		category: "Special",
		desc: "Has a 20% chance to confuse the target.",
		shortDesc: "20% chance to confuse the target.",
		id: "waterpulseidealworld",
		name: "Water Pulse-Ideal-World",
		pp: 20,
		priority: 0,
		flags: {protect: 1, pulse: 1, mirror: 1, distance: 1},
		secondary: {
			chance: 20,
			volatileStatus: 'confusion',
		},
		target: "any",
		type: "Water",
		zMovePower: 120,
		contestType: "Beautiful",
	},
	"hiddenforce": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "This move's type depends on the user's individual values (IVs), and can be any type but Fairy and Normal.",
		shortDesc: "Varies in type based on the user's IVs.",
		id: "hiddenforce",
		name: "Hidden Force",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove: function (move, pokemon) {
			move.type = pokemon.hpType || 'Dark';
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 120,
		contestType: "Clever",
	},
	"hiddenforcebug": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		name: "Hidden Force Bug",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Bug",
		contestType: "Clever",
	},
	"hiddenforcedark": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		name: "Hidden Force Dark",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dark",
		contestType: "Clever",
	},
	"hiddenforcedragon": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		name: "Hidden Force Dragon",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		contestType: "Clever",
	},
	"hiddenforceelectric": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		isViable: true,
		name: "Hidden Force Electric",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Electric",
		contestType: "Clever",
	},
	"hiddenforcefighting": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		isViable: true,
		name: "Hidden Force Fighting",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fighting",
		contestType: "Clever",
	},
	"hiddenforcefire": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		isViable: true,
		name: "Hidden Force Fire",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Fire",
		contestType: "Clever",
	},
	"hiddenforceflying": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		name: "Hidden Force Flying",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Flying",
		contestType: "Clever",
	},
	"hiddenforceghost": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		name: "Hidden Force Ghost",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ghost",
		contestType: "Clever",
	},
	"hiddenforcegrass": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		isViable: true,
		name: "Hidden Force Grass",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Grass",
		contestType: "Clever",
	},
	"hiddenforceground": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		name: "Hidden Force Ground",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ground",
		contestType: "Clever",
	},
	"hiddenforceice": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		isViable: true,
		name: "Hidden Force Ice",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Ice",
		contestType: "Clever",
	},
	"hiddenforcepoison": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		name: "Hidden Force Poison",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Poison",
		contestType: "Clever",
	},
	"hiddenforcepsychic": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		name: "Hidden Force Psychic",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Psychic",
		contestType: "Clever",
	},
	"hiddenforcerock": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		name: "Hidden Force Rock",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Rock",
		contestType: "Clever",
	},
	"hiddenforcesteel": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		name: "Hidden Force Steel",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Steel",
		contestType: "Clever",
	},
	"hiddenforcewater": {
		num: 237,
		accuracy: 100,
		basePower: 60,
		category: "Physical",
		desc: "",
		shortDesc: "",
		id: "hiddenforce",
		name: "Hidden Force Water",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Water",
		contestType: "Clever",
	},
	"rinseoff": {
		num: 235,
		accuracy: true,
		basePower: 0,
		category: "Status",
		desc: "The user restores 1/2 of its maximum HP if Delta Stream or no weather conditions are in effect, 2/3 of its maximum HP if the weather is Desolate Land or Sunny Day, and 1/4 of its maximum HP if the weather is Hail, Primordial Sea, Rain Dance, or Sandstorm, all rounded half down.",
		shortDesc: "Heals the user by a weather-dependent amount.",
		id: "rinseoff",
		isViable: true,
		name: "Rinse Off",
		pp: 5,
		priority: 0,
		flags: {snatch: 1, heal: 1},
		onHit: function (pokemon) {
			if (this.isWeather(['raindance', 'primordialsea'])) {
				return this.heal(this.modify(pokemon.maxhp, 0.667));
			} else {
				return this.heal(this.modify(pokemon.maxhp, 0.5));
			}
		},
		secondary: null,
		target: "self",
		type: "Water",
		zMoveEffect: 'clearnegativeboost',
		contestType: "Clever",
	},
	"dragonragesylvemons": {
		num: 101,
		accuracy: 100,
		basePower: 0,
		damage: 'level',
		category: "Special",
		desc: "Deals damage to the target equal to the user's level.",
		shortDesc: "Does damage equal to the user's level.",
		id: "dragonragesylvemons",
		isViable: true,
		name: "Dragon Rage-Sylvemons",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		secondary: null,
		target: "normal",
		type: "Dragon",
		zMovePower: 100,
		contestType: "Clever",
	},
	"firepunchsylvemons": {
		num: 7,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		desc: "Has a 10% chance to burn the target.",
		shortDesc: "10% chance to burn the target.",
		id: "firepunchsylvemons",
		isViable: true,
		name: "Fire Punch-Sylvemons",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			status: 'brn',
		},
		target: "normal",
		type: "Fire",
		zMovePower: 140,
		contestType: "Tough",
	},
	"thunderpunchsylvemons": {
		num: 7,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		desc: "Has a 10% chance to paralyze the target.",
		shortDesc: "10% chance to paralyze the target.",
		id: "firepunchsylvemons",
		isViable: true,
		name: "Thunder Punch-Sylvemons",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			status: 'par',
		},
		target: "normal",
		type: "Electric",
		zMovePower: 140,
		contestType: "Tough",
	},
	"icepunchsylvemons": {
		num: 7,
		accuracy: 100,
		basePower: 85,
		category: "Physical",
		desc: "Has a 10% chance to freeze the target.",
		shortDesc: "10% chance to freeze the target.",
		id: "icepunchsylvemons",
		isViable: true,
		name: "Ice Punch-Sylvemons",
		pp: 15,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1, punch: 1},
		secondary: {
			chance: 10,
			status: 'frz',
		},
		target: "normal",
		type: "Ice",
		zMovePower: 140,
		contestType: "Tough",
	},
	"incineratesylvemons": {
		num: 282,
		accuracy: 100,
		basePower: 65,
		category: "Special",
		desc: "If the target is holding an item that can be removed from it, ignoring the Sticky Hold Ability, this move's power is multiplied by 1.5. If the user has not fainted, the target loses its held item. This move cannot remove Z-Crystals, cause Pokemon with the Sticky Hold Ability to lose their held item, cause Pokemon that can Mega Evolve to lose the Mega Stone for their species, or cause a Kyogre, a Groudon, a Giratina, an Arceus, a Genesect, or a Silvally to lose their Blue Orb, Red Orb, Griseous Orb, Plate, Drive, or Memory respectively. Items lost to this move cannot be regained with Recycle or the Harvest Ability.",
		shortDesc: "1.5x damage if foe holds an item. Removes item.",
		id: "incineratesylvemons",
		isViable: true,
		name: "Incinerate-Sylvemons",
		pp: 20,
		priority: 0,
		flags: {contact: 1, protect: 1, mirror: 1},
		onBasePowerPriority: 4,
		onBasePower: function (basePower, source, target, move) {
			let item = target.getItem();
			if (!this.singleEvent('TakeItem', item, target.itemData, target, source, move, item)) return;
			if (item.id) {
				return this.chainModify(1.5);
			}
		},
		onAfterHit: function (target, source) {
			if (source.hp) {
				let item = target.takeItem();
				if (item) {
					this.add('-enditem', target, item.name, '[from] move: Incinerate', '[of] ' + source);
				}
			}
		},
		secondary: null,
		target: "normal",
		type: "Fire",
		zMovePower: 120,
		contestType: "Clever",
	},
	"venomslam": {
		num: 690,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		desc: "If the user is hit by a contact move this turn before it can execute this move, the attacker is badly poisoned.",
		shortDesc: "Badly poisons on contact with the user before it moves.",
		id: "venomslam",
		isViable: true,
		name: "Venom Slam",
		pp: 15,
		priority: -3,
		flags: {bullet: 1, protect: 1},
		beforeTurnCallback: function (pokemon) {
			pokemon.addVolatile('venomslam');
		},
		effect: {
			duration: 1,
			onStart: function ( pokemon, source, move ) {
				this.add('-singleturn', pokemon, 'move: Venom Slam');
			},
			onHit: function (pokemon, source, move) {
				if (move.flags['contact']) {
					source.trySetStatus('tox', pokemon);
				}
			},
		},
		onMoveAborted: function (pokemon) {
			pokemon.removeVolatile('venomslam');
		},
		onAfterMove: function (pokemon) {
			pokemon.removeVolatile('venomslam');
		},
		onPrepareHit: function(target, source, move) {
			this.attrLastMove('[still]');
			this.add('-anim', source, "Poison Jab", target);
		},
		secondary: null,
		target: "normal",
		type: "Poison",
		zMovePower: 180,
		contestType: "Tough",
	},
	"twineedlesylvemons": {
		num: 41,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		desc: "Hits twice, with each hit having a 20% chance to poison the target. If the first hit breaks the target's substitute, it will take damage for the second hit.",
		shortDesc: "Hits 2 times. Each hit has 20% chance to poison.",
		id: "twineedlesylvemons",
		name: "Twineedle-Sylvemons",
		pp: 20,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		multihit: 2,
		secondary: {
			chance: 20,
			status: 'psn',
		},
		target: "normal",
		type: "Bug",
		zMovePower: 100,
		contestType: "Cool",
	},
	"thunderclap": {
		num: 304,
		accuracy: 100,
		basePower: 100,
		category: "Physical",
		desc: "No additional effect.",
		shortDesc: "No additional effect. Hits adjacent foes.",
		id: "thunderclap",
		isViable: true,
		name: "Thunder Clap",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, sound: 1, authentic: 1},
		secondary: null,
		target: "allAdjacentFoes",
		type: "Electric",
		zMovePower: 175,
		contestType: "Cool",
	},
	"stormstrike": {
		num: 311,
		accuracy: 100,
		basePower: 50,
		category: "Physical",
		desc: "Power doubles if a weather condition other than Delta Stream is active, and this move's type changes to match. Ice type during Hail, Water type during Primordial Sea or Rain Dance, Rock type during Sandstorm, and Fire type during Desolate Land or Sunny Day.",
		shortDesc: "Power doubles and type varies in each weather.",
		id: "stormstrike",
		name: "Storm Strike",
		pp: 10,
		priority: 0,
		flags: {bullet: 1, protect: 1, mirror: 1},
		onModifyMove: function (move) {
			switch (this.effectiveWeather()) {
			case 'sunnyday':
			case 'desolateland':
				move.type = 'Fire';
				move.basePower *= 2;
				break;
			case 'raindance':
			case 'primordialsea':
				move.type = 'Water';
				move.basePower *= 2;
				break;
			case 'sandstorm':
				move.type = 'Rock';
				move.basePower *= 2;
				break;
			case 'hail':
				move.type = 'Ice';
				move.basePower *= 2;
				break;
			}
		},
		secondary: null,
		target: "normal",
		type: "Normal",
		zMovePower: 160,
		contestType: "Beautiful",
	},
	"algaeallure": {
		num: 202,
		accuracy: 100,
		basePower: 90,
		category: "Special",
		desc: "The user recovers 1/2 the HP lost by the target, rounded half up. If Big Root is held by the user, the HP recovered is 1.3x normal, rounded half down.",
		shortDesc: "User recovers 50% of the damage dealt.",
		id: "algaeallure",
		isViable: true,
		name: "Algae Allure",
		pp: 10,
		priority: 0,
		flags: {protect: 1, mirror: 1, heal: 1},
		drain: [1, 2],
		secondary: null,
		target: "normal",
		type: "Water",
		zMovePower: 140,
		contestType: "Clever",
	},
	"starspit": {
		num: 722,
		accuracy: 100,
		basePower: 80,
		basePowerCallback: function (pokemon, target, move) {
			let damagedByTarget = pokemon.attackedBy.some(p =>
				p.source === target && p.damage > 0 && p.thisTurn
			);
			if (damagedByTarget) {
				this.debug('Boosted for getting hit by ' + target);
				return move.basePower * 2;
			}
			return move.basePower;
		},
		category: "Special",
		desc: "This move becomes a physical attack if the user's Attack is greater than its Special Attack, including stat stage changes. This move and its effects ignore the Abilities of other Pokemon.",
		shortDesc: "Physical if user's Atk > Sp. Atk. 1.5x damage if user moves after target.",
		id: "starspit",
		isViable: true,
		name: "Star Spit",
		pp: 15,
		priority: 0,
		flags: {protect: 1, mirror: 1},
		onModifyMove: function (move, pokemon) {
			if (pokemon.getStat('atk', false, true) > pokemon.getStat('spa', false, true)) move.category = 'Physical';
		},
		ignoreAbility: true,
		secondary: null,
		target: "normal",
		type: "Flying",
		zMovePower: 180,
		contestType: "Cool",
	},
};

exports.BattleMovedex = BattleMovedex;
